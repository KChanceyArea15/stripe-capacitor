{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\nimport type { ISdkManagedPaymentIntent } from '@stripe/terminal-js';\r\nimport { loadStripeTerminal } from '@stripe/terminal-js';\r\nimport type { DiscoverResult, ErrorResponse, Reader, Terminal } from '@stripe/terminal-js/types/terminal';\r\n\r\nimport { TerminalConnectTypes } from './definitions';\r\nimport type {\r\n  StripeTerminalPlugin,\r\n  ReaderInterface,\r\n  SimulateReaderUpdate,\r\n  SimulatedCardType,\r\n  Cart,\r\n} from './definitions';\r\nimport { TerminalEventsEnum } from './events.enum';\r\nimport {\r\n  convertReaderInterface,\r\n  mapFromCartToICart,\r\n  mapFromConnectionStatus,\r\n  mapFromPaymentStatus,\r\n} from './terminal-mappers';\r\n\r\nexport class StripeTerminalWeb extends WebPlugin implements StripeTerminalPlugin {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  private stripeTerminal: Terminal | undefined = undefined;\r\n  private tokenProviderPromiseResolve: ((value: string) => void)[] = [];\r\n  private discoveredReaders: ReaderInterface[] = [];\r\n  private cachedFindReaders: Reader[] = [];\r\n  private cachedPaymentIntent: ISdkManagedPaymentIntent | undefined = undefined;\r\n  private isTest = false;\r\n\r\n  async initialize(options: { tokenProviderEndpoint: string; isTest: boolean }): Promise<void> {\r\n    if (this.stripeTerminal !== undefined) {\r\n      throw new Error('Stripe Terminal has already been initialized');\r\n    }\r\n\r\n    this.isTest = options.isTest;\r\n    const stripeTerminal = await loadStripeTerminal();\r\n    this.stripeTerminal = stripeTerminal?.create({\r\n      onFetchConnectionToken: async () => {\r\n        this.notifyListeners(TerminalEventsEnum.RequestedConnectionToken, null);\r\n        if (options.tokenProviderEndpoint) {\r\n          const response = await fetch(options.tokenProviderEndpoint, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n          const data = await response.json();\r\n          return data.secret;\r\n        } else {\r\n          return new Promise<string>((resolve) => this.tokenProviderPromiseResolve.push(resolve));\r\n        }\r\n      },\r\n      onConnectionStatusChange: (status) => {\r\n        this.notifyListeners(TerminalEventsEnum.ConnectionStatusChange, {\r\n          status: mapFromConnectionStatus(status.status),\r\n        });\r\n      },\r\n      onPaymentStatusChange: (status) => {\r\n        this.notifyListeners(TerminalEventsEnum.PaymentStatusChange, {\r\n          status: mapFromPaymentStatus(status.status),\r\n        });\r\n      },\r\n      onUnexpectedReaderDisconnect: () => {\r\n        this.notifyListeners(TerminalEventsEnum.UnexpectedReaderDisconnect, {\r\n          reader: null,\r\n        });\r\n      },\r\n    });\r\n    this.notifyListeners(TerminalEventsEnum.Loaded, null);\r\n  }\r\n\r\n  async discoverReaders(options: { type: TerminalConnectTypes; locationId?: string }): Promise<{\r\n    readers: ReaderInterface[];\r\n  }> {\r\n    if (this.stripeTerminal === undefined) {\r\n      throw new Error('Stripe Terminal has not been initialized');\r\n    }\r\n\r\n    if (options.type !== TerminalConnectTypes.Internet) {\r\n      throw this.unavailable(`${options.type} is selected. Web platform is supported only internet connection.`);\r\n    }\r\n\r\n    const discoverResult = await this.stripeTerminal.discoverReaders({\r\n      simulated: this.isTest,\r\n      location: options.locationId,\r\n    });\r\n\r\n    if ((discoverResult as ErrorResponse).error) {\r\n      throw new Error((discoverResult as ErrorResponse).error.message);\r\n    }\r\n    this.cachedFindReaders = (discoverResult as DiscoverResult).discoveredReaders;\r\n    this.discoveredReaders = (discoverResult as DiscoverResult).discoveredReaders.map((reader) =>\r\n      convertReaderInterface(reader),\r\n    );\r\n    this.notifyListeners(TerminalEventsEnum.DiscoveredReaders, {\r\n      readers: this.discoveredReaders,\r\n    });\r\n\r\n    return {\r\n      readers: this.discoveredReaders,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * This method is not supported in the web platform.\r\n   */\r\n  async cancelDiscoverReaders(): Promise<void> {\r\n    console.log('cancelDiscoverReaders');\r\n  }\r\n\r\n  async setConnectionToken(options: { token: string }): Promise<void> {\r\n    if (this.tokenProviderPromiseResolve.length === 0) {\r\n      return;\r\n    }\r\n    console.log('setConnectionToken', options);\r\n    const resolve = this.tokenProviderPromiseResolve.shift();\r\n    if (resolve === undefined) {\r\n      throw new Error('tokenProviderPromiseResolve is empty.');\r\n    }\r\n    resolve(options.token);\r\n  }\r\n\r\n  async setSimulatorConfiguration(options: {\r\n    update?: SimulateReaderUpdate | undefined;\r\n    simulatedCard?: SimulatedCardType | undefined;\r\n    simulatedTipAmount?: number | undefined;\r\n  }): Promise<void> {\r\n    console.log('setSimulatorConfiguration', options);\r\n  }\r\n\r\n  async connectReader(options: { reader: ReaderInterface }): Promise<void> {\r\n    const reader = this.cachedFindReaders.find((reader) => reader.serial_number === options.reader.serialNumber);\r\n    if (reader === undefined) {\r\n      throw new Error('reader is not match from descovered readers.');\r\n    }\r\n    const connectedResult = await this.stripeTerminal?.connectReader(reader);\r\n    if ((connectedResult as ErrorResponse).error) {\r\n      throw new Error((connectedResult as ErrorResponse).error.message);\r\n    }\r\n    this.notifyListeners(TerminalEventsEnum.ConnectedReader, null);\r\n  }\r\n\r\n  async getConnectedReader(): Promise<{ reader: ReaderInterface | null }> {\r\n    const reader = this.stripeTerminal?.getConnectedReader();\r\n    if (reader === undefined) {\r\n      return {\r\n        reader: null,\r\n      };\r\n    }\r\n    return {\r\n      reader: convertReaderInterface(reader),\r\n    };\r\n  }\r\n\r\n  async disconnectReader(): Promise<void> {\r\n    await this.stripeTerminal?.disconnectReader();\r\n    this.notifyListeners(TerminalEventsEnum.DisconnectedReader, null);\r\n  }\r\n\r\n  async collectPaymentMethod(options: { paymentIntent: string }): Promise<void> {\r\n    const collectResult = await this.stripeTerminal?.collectPaymentMethod(options.paymentIntent);\r\n\r\n    if ((collectResult as ErrorResponse).error) {\r\n      throw new Error((collectResult as ErrorResponse).error.message);\r\n    }\r\n\r\n    this.cachedPaymentIntent = (\r\n      collectResult as {\r\n        paymentIntent: ISdkManagedPaymentIntent;\r\n      }\r\n    ).paymentIntent;\r\n\r\n    this.notifyListeners(TerminalEventsEnum.CollectedPaymentIntent, null);\r\n  }\r\n\r\n  async cancelCollectPaymentMethod(): Promise<void> {\r\n    await this.stripeTerminal?.cancelCollectPaymentMethod();\r\n    this.notifyListeners(TerminalEventsEnum.Canceled, null);\r\n  }\r\n\r\n  async confirmPaymentIntent(): Promise<void> {\r\n    if (this.cachedPaymentIntent === undefined) {\r\n      throw new Error('PaymentIntent is not cached.');\r\n    }\r\n    const processResult = await this.stripeTerminal?.processPayment(this.cachedPaymentIntent);\r\n    if ((processResult as ErrorResponse).error) {\r\n      throw new Error((processResult as ErrorResponse).error.message);\r\n    }\r\n    this.notifyListeners(TerminalEventsEnum.ConfirmedPaymentIntent, null);\r\n  }\r\n\r\n  async installAvailableUpdate(): Promise<void> {\r\n    console.log('installAvailableUpdate');\r\n  }\r\n  async cancelInstallUpdate(): Promise<void> {\r\n    console.log('cancelInstallUpdate');\r\n  }\r\n  async setReaderDisplay(options: Cart): Promise<void> {\r\n    await this.stripeTerminal?.setReaderDisplay({\r\n      type: 'cart',\r\n      cart: mapFromCartToICart(options),\r\n    });\r\n    console.log('setReaderDisplay', options);\r\n  }\r\n  async clearReaderDisplay(): Promise<void> {\r\n    await this.stripeTerminal?.clearReaderDisplay();\r\n  }\r\n  async rebootReader(): Promise<void> {\r\n    console.log('rebootReader');\r\n  }\r\n  async cancelReaderReconnection(): Promise<void> {\r\n    console.log('cancelReaderReconnection');\r\n  }\r\n  async processPayment(): Promise<{ status: string; id: string }> {\r\n    throw this.unimplemented('processPayment');\r\n  }\r\n\r\n  collect = 'deprecated';\r\n  cancelCollect = 'deprecated';\r\n}\r\n"]}